{"map":"{\"version\":3,\"file\":\"registerServiceWorker.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/registerServiceWorker.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        var publicUrl = new URL(process.env.PUBLIC_URL, window.location.toString());\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n        window.addEventListener('load', function () {\r\n            var swUrl = process.env.PUBLIC_URL + \"/service-worker.js\";\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(function () {\r\n                    console.log('This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ');\r\n                });\r\n            }\r\n            else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(function (registration) {\r\n        registration.onupdatefound = function () {\r\n            var installingWorker = registration.installing;\r\n            if (installingWorker) {\r\n                installingWorker.onstatechange = function () {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a 'New content is\r\n                            // available; please refresh.' message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        }\r\n                        else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // 'Content is cached for offline use.' message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n        };\r\n    })\r\n        .catch(function (error) {\r\n        console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\nfunction checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(function (response) {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (response.status === 404 ||\r\n            response.headers.get('content-type').indexOf('javascript') === -1) {\r\n            // No service worker found. Probably a different app. Reload the page.\r\n            navigator.serviceWorker.ready.then(function (registration) {\r\n                registration.unregister().then(function () {\r\n                    window.location.reload();\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            // Service worker found. Proceed as normal.\r\n            registerValidSW(swUrl);\r\n        }\r\n    })\r\n        .catch(function () {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(function (registration) {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=registerServiceWorker.js.map"}
